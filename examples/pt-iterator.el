(require 'cl)
(require 'class)

(class Iterator (Object)
       (defun init (self set)
         (self. set (remove-duplicates set))
         (self. pos 0))

       (defun length (self)
         (length (self. set)))

       (defun next (self &optional n)
         (when (> (self. length) 1)
           (setq n (or n 1))
           (self. pos (mod (+ n (self. pos))
                           (self. length)))
           (self. current)))

       (defun current (self)
         (nth (self. pos) (self. set)))

       (defun shuffle (self)
         (when (> (self. length) 1)
           (random t)
           (let ((n (1+ (random (self. length)))))
             (while (= n (self. length))
               (setq n (1+ (random (self. length)))))
             (self. next n))))

       (defun reset (self)
         (self. pos 0))

       (defun push (self elm)
         (let ((set (self. set))
               (pos (self. pos)))
           (if (= 0 pos)
               (self. set (cons elm set))
             (setcdr (nthcdr (1- pos) set)
                     (cons elm (nthcdr pos set))))
           elm))

       (defun pop (self)
         (let ((set (self. set))
               (pos (self. pos))
               (top (self. current)))
           (if (= 0 pos)
               (self. set (cdr set))
             (setcdr (nthcdr (1- pos) set)
                     (nthcdr (1+ pos) set)))
           (self. next)
           top)))

(provide 'pt-iterator)
